!vertex_shader
uniform vec3 eye;
varying vec3 l;
varying vec3 n;
varying vec3 h;

void main(void)
{
  vec3 p = vec3(gl_ModelViewMatrix * gl_Vertex);
  l = normalize(vec3(gl_LightSource[0].position) - p);
  h = normalize(vec3(eye) - p);
  n = gl_NormalMatrix * gl_Normal;
  gl_TexCoord[0] = gl_MultiTexCoord0;
  gl_Position = gl_ModelViewProjectionMatrix * gl_Vertex;
}

!fragment_shader
varying vec3 l;
varying vec3 n;
varying vec3 h;
uniform sampler2D tex;

void main(void)
{
  vec3 nn = normalize(n);
  vec3 nl = normalize(l);
  vec4 diff = max(dot(nn, nl), 0.0) * gl_LightSource[0].diffuse * gl_FrontMaterial.diffuse;
  vec4 spec = pow(max(dot(nn, normalize(normalize(h) + nl)), 0.0), gl_FrontMaterial.shininess) * gl_LightSource[0].specular * gl_FrontMaterial.specular;
  vec4 amb = gl_LightSource[0].ambient * gl_FrontMaterial.ambient;
  gl_FragColor = (diff + spec + amb + gl_FrontMaterial.emission) * texture2D(tex, gl_TexCoord[0].xy);
}